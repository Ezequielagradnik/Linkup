{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/agrad/Documents/GitHub/Linkup/app/api/login/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\n\r\nexport async function POST(req) {\r\n  console.log(\"Login request received\")\r\n  try {\r\n    const { email, password } = await req.json()\r\n    console.log(\"Login attempt for email:\", email)\r\n\r\n    console.log(\"BACKEND_URL:\", process.env.BACKEND_URL)\r\n    const url = `${process.env.BACKEND_URL}/api/login`\r\n    console.log(\"Sending request to:\", url)\r\n\r\n    const response = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    })\r\n\r\n    console.log(\"Response status:\", response.status)\r\n    console.log(\"Response headers:\", Object.fromEntries(response.headers))\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text()\r\n      console.log(\"Error response body:\", errorText)\r\n      let errorData\r\n      try {\r\n        errorData = JSON.parse(errorText)\r\n      } catch (e) {\r\n        console.log(\"Failed to parse error response as JSON\")\r\n      }\r\n      throw new Error(errorData?.error || errorText || \"error puto\")\r\n    }\r\n\r\n    const responseText = await response.text()\r\n    console.log(\"Response body:\", responseText)\r\n    \r\n    let data\r\n    try {\r\n      data = JSON.parse(responseText)\r\n    } catch (e) {\r\n      console.log(\"Failed to parse response as JSON\")\r\n      throw new Error(\"Invalid response from server\")\r\n    }\r\n\r\n    console.log(\"Parsed response data:\", data)\r\n    return NextResponse.json(data)\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error)\r\n    console.error(\"Error stack:\", error.stack)\r\n    return NextResponse.json({ error: error.message }, { status: 400 })\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,GAAG;IAC5B,QAAQ,GAAG,CAAC;IACZ,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAC1C,QAAQ,GAAG,CAAC,4BAA4B;QAExC,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,sEAA2B,UAAU,CAAC;QAClD,QAAQ,GAAG,CAAC,uBAAuB;QAEnC,MAAM,WAAW,MAAM,MAAM,KAAK;YAChC,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAO;YAAS;QACzC;QAEA,QAAQ,GAAG,CAAC,oBAAoB,SAAS,MAAM;QAC/C,QAAQ,GAAG,CAAC,qBAAqB,OAAO,WAAW,CAAC,SAAS,OAAO;QAEpE,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,GAAG,CAAC,wBAAwB;YACpC,IAAI;YACJ,IAAI;gBACF,YAAY,KAAK,KAAK,CAAC;YACzB,EAAE,OAAO,GAAG;gBACV,QAAQ,GAAG,CAAC;YACd;YACA,MAAM,IAAI,MAAM,WAAW,SAAS,aAAa;QACnD;QAEA,MAAM,eAAe,MAAM,SAAS,IAAI;QACxC,QAAQ,GAAG,CAAC,kBAAkB;QAE9B,IAAI;QACJ,IAAI;YACF,OAAO,KAAK,KAAK,CAAC;QACpB,EAAE,OAAO,GAAG;YACV,QAAQ,GAAG,CAAC;YACZ,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC,yBAAyB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,QAAQ,KAAK,CAAC,gBAAgB,MAAM,KAAK;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}