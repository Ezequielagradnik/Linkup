{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/agrad/Documents/GitHub/Linkup/app/api/apply/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\n\r\nexport async function POST(req) {\r\n  console.log(\"==== POST request received in /api/apply ====\")\r\n  console.log(\"Timestamp:\", new Date().toISOString())\r\n  console.log(\"Request headers:\", JSON.stringify(req.headers, null, 2))\r\n\r\n  try {\r\n    const applicationData = await req.json()\r\n    console.log(\"Application data:\", JSON.stringify(applicationData, null, 2))\r\n\r\n    const backendUrl = process.env.BACKEND_URL || \"https://linkup-back.vercel.app\"\r\n    console.log(\"Backend URL:\", backendUrl)\r\n    console.log(\"Full endpoint:\", `${backendUrl}/api/apply`)\r\n\r\n    console.log(\"Sending request to backend...\")\r\n    const response = await fetch(`${backendUrl}/api/apply`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(applicationData),\r\n    })\r\n\r\n    console.log(\"Response status:\", response.status)\r\n    console.log(\"Response headers:\", JSON.stringify(Object.fromEntries(response.headers.entries()), null, 2))\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text()\r\n      console.error(\"Backend error response:\", errorText)\r\n      console.error(\"Backend error status:\", response.status)\r\n      return NextResponse.json(\r\n        { error: `Backend error: ${errorText}`, status: response.status },\r\n        { status: response.status },\r\n      )\r\n    }\r\n\r\n    const data = await response.json()\r\n    console.log(\"Backend success response:\", JSON.stringify(data, null, 2))\r\n    return NextResponse.json(data)\r\n  } catch (error) {\r\n    console.error(\"==== Error in /api/apply ====\")\r\n    console.error(\"Error name:\", error.name)\r\n    console.error(\"Error message:\", error.message)\r\n    console.error(\"Error stack:\", error.stack)\r\n    return NextResponse.json({ error: \"Internal server error\", details: error.message }, { status: 500 })\r\n  } finally {\r\n    console.log(\"==== /api/apply request processing completed ====\")\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,GAAG;IAC5B,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,cAAc,IAAI,OAAO,WAAW;IAChD,QAAQ,GAAG,CAAC,oBAAoB,KAAK,SAAS,CAAC,IAAI,OAAO,EAAE,MAAM;IAElE,IAAI;QACF,MAAM,kBAAkB,MAAM,IAAI,IAAI;QACtC,QAAQ,GAAG,CAAC,qBAAqB,KAAK,SAAS,CAAC,iBAAiB,MAAM;QAEvE,MAAM,aAAa,QAAQ,GAAG,CAAC,WAAW,IAAI;QAC9C,QAAQ,GAAG,CAAC,gBAAgB;QAC5B,QAAQ,GAAG,CAAC,kBAAkB,GAAG,WAAW,UAAU,CAAC;QAEvD,QAAQ,GAAG,CAAC;QACZ,MAAM,WAAW,MAAM,MAAM,GAAG,WAAW,UAAU,CAAC,EAAE;YACtD,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,QAAQ,GAAG,CAAC,oBAAoB,SAAS,MAAM;QAC/C,QAAQ,GAAG,CAAC,qBAAqB,KAAK,SAAS,CAAC,OAAO,WAAW,CAAC,SAAS,OAAO,CAAC,OAAO,KAAK,MAAM;QAEtG,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,2BAA2B;YACzC,QAAQ,KAAK,CAAC,yBAAyB,SAAS,MAAM;YACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,CAAC,eAAe,EAAE,WAAW;gBAAE,QAAQ,SAAS,MAAM;YAAC,GAChE;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC,6BAA6B,KAAK,SAAS,CAAC,MAAM,MAAM;QACpE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,QAAQ,KAAK,CAAC,eAAe,MAAM,IAAI;QACvC,QAAQ,KAAK,CAAC,kBAAkB,MAAM,OAAO;QAC7C,QAAQ,KAAK,CAAC,gBAAgB,MAAM,KAAK;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAyB,SAAS,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrG,SAAU;QACR,QAAQ,GAAG,CAAC;IACd;AACF"}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}