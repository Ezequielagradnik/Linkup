{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/agrad/Documents/GitHub/Linkup/app/api/apply/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\n\r\nexport async function POST(req) {\r\n  console.log(\"POST request received in frontend apply route handler\")\r\n  try {\r\n    const applicationData = await req.json()\r\n    console.log(\"Raw application data:\", JSON.stringify(applicationData, null, 2))\r\n\r\n    const backendUrl = process.env.BACKEND_URL || \"https://linkup-backend.vercel.app\"\r\n    console.log(\"Backend URL:\", backendUrl)\r\n    console.log(\"Attempting to submit application to:\", `${backendUrl}/api/apply`)\r\n\r\n    console.log(\"Formatting application data...\")\r\n    const formattedData = {\r\n      ...applicationData,\r\n      hasInvestment: applicationData.hasInvestment === \"yes\",\r\n      seekingInvestment: applicationData.seekingInvestment === \"yes\",\r\n      hasCustomers: applicationData.hasCustomers === \"yes\",\r\n    }\r\n    console.log(\"Formatted application data:\", JSON.stringify(formattedData, null, 2))\r\n\r\n    console.log(\"Sending request to backend...\")\r\n    const response = await fetch(`${backendUrl}/api/apply`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(formattedData),\r\n    })\r\n    console.log(\"Received response from backend. Status:\", response.status)\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text()\r\n      console.error(\"Backend error response:\", errorText)\r\n      console.error(\"Response status:\", response.status)\r\n      console.error(\"Response headers:\", JSON.stringify(Object.fromEntries(response.headers.entries()), null, 2))\r\n      return NextResponse.json(\r\n        { error: `Failed to submit application. Status: ${response.status}` },\r\n        { status: response.status },\r\n      )\r\n    }\r\n\r\n    const data = await response.json()\r\n    console.log(\"Successfully processed application. Response data:\", JSON.stringify(data, null, 2))\r\n    return NextResponse.json(data)\r\n  } catch (error) {\r\n    console.error(\"Error in apply route handler:\", error)\r\n    console.error(\"Error stack:\", error.stack)\r\n    return NextResponse.json(\r\n      { error: \"An unexpected error occurred while processing your application\" },\r\n      { status: 500 },\r\n    )\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,GAAG;IAC5B,QAAQ,GAAG,CAAC;IACZ,IAAI;QACF,MAAM,kBAAkB,MAAM,IAAI,IAAI;QACtC,QAAQ,GAAG,CAAC,yBAAyB,KAAK,SAAS,CAAC,iBAAiB,MAAM;QAE3E,MAAM,aAAa,QAAQ,GAAG,CAAC,WAAW,IAAI;QAC9C,QAAQ,GAAG,CAAC,gBAAgB;QAC5B,QAAQ,GAAG,CAAC,wCAAwC,GAAG,WAAW,UAAU,CAAC;QAE7E,QAAQ,GAAG,CAAC;QACZ,MAAM,gBAAgB;YACpB,GAAG,eAAe;YAClB,eAAe,gBAAgB,aAAa,KAAK;YACjD,mBAAmB,gBAAgB,iBAAiB,KAAK;YACzD,cAAc,gBAAgB,YAAY,KAAK;QACjD;QACA,QAAQ,GAAG,CAAC,+BAA+B,KAAK,SAAS,CAAC,eAAe,MAAM;QAE/E,QAAQ,GAAG,CAAC;QACZ,MAAM,WAAW,MAAM,MAAM,GAAG,WAAW,UAAU,CAAC,EAAE;YACtD,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QACA,QAAQ,GAAG,CAAC,2CAA2C,SAAS,MAAM;QAEtE,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,2BAA2B;YACzC,QAAQ,KAAK,CAAC,oBAAoB,SAAS,MAAM;YACjD,QAAQ,KAAK,CAAC,qBAAqB,KAAK,SAAS,CAAC,OAAO,WAAW,CAAC,SAAS,OAAO,CAAC,OAAO,KAAK,MAAM;YACxG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,CAAC,sCAAsC,EAAE,SAAS,MAAM,EAAE;YAAC,GACpE;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC,sDAAsD,KAAK,SAAS,CAAC,MAAM,MAAM;QAC7F,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,QAAQ,KAAK,CAAC,gBAAgB,MAAM,KAAK;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiE,GAC1E;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}